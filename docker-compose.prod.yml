version: "3.8"

services:
  # Node.js / Express backend
  backend:
    build:
      context: .
      dockerfile: infra/docker/node.Dockerfile
    command: npm run start:prod
    restart: always
    volumes:
      - ./services/backend:/app
    ports:
      - "3000:3000"
    networks:
      - app-network

  # FASTAPI backend + SDC consumer
  fastapi:
    build:
      context: .
      dockerfile: infra/docker/fastapi.Dockerfile
    network_mode: host
    restart: always
    volumes:
      - ./services/fastapi:/app
      - ./services/sdc_backend:/app/sdc_backend
      - ./services/sdc_providers:/app/providers
    environment:
      - SDC_USE_DISCOVERY=true
      - REF_IP=
      - REF_FAC=fac
      - REF_POC=poc
      - REF_BED=bed
    command: uvicorn main:app --host 0.0.0.0 --port 8001

  # Providers (each in host network)
  provider_capnography:
    build:
      context: .
      dockerfile: infra/docker/python-provider.Dockerfile
    network_mode: host
    restart: always
    volumes:
      - ./services/sdc_providers/capnography:/app
    environment:
      - PROVIDER_NAME=capnography

  provider_ecg:
    build:
      context: .
      dockerfile: infra/docker/python-provider.Dockerfile
    network_mode: host
    restart: always
    volumes:
      - ./services/sdc_providers/ecg:/app
    environment:
      - PROVIDER_NAME=ecg

  provider_infusion:
    build:
      context: .
      dockerfile: infra/docker/python-provider.Dockerfile
    network_mode: host
    restart: always
    volumes:
      - ./services/sdc_providers/infusion:/app
    environment:
      - PROVIDER_NAME=infusion_pump

  provider_mechanical_ventilator:
    build:
      context: .
      dockerfile: infra/docker/python-provider.Dockerfile
    network_mode: host
    restart: always
    volumes:
      - ./services/sdc_providers/mechanical_ventilator:/app
    environment:
      - PROVIDER_NAME=mechanical_ventilator

  provider_nibp:
    build:
      context: .
      dockerfile: infra/docker/python-provider.Dockerfile
    network_mode: host
    restart: always
    volumes:
      - ./services/sdc_providers/nibp:/app
    environment:
      - PROVIDER_NAME=nibp

  provider_spo2:
    build:
      context: .
      dockerfile: infra/docker/python-provider.Dockerfile
    network_mode: host
    restart: always
    volumes:
      - ./services/sdc_providers/spo2:/app
    environment:
      - PROVIDER_NAME=spo2

  provider_temperature:
    build:
      context: .
      dockerfile: infra/docker/python-provider.Dockerfile
    network_mode: host
    restart: always
    volumes:
      - ./services/sdc_providers/temperature:/app
    environment:
      - PROVIDER_NAME=temperature

  # React frontend #1 (realtime data)
  webapp1:
    build:
      context: .
      dockerfile: infra/docker/react-display.Dockerfile
    restart: always
    volumes:
      - ./apps/webapp1_realtime_data:/app
      - webapp1_node_modules:/app/node_modules
    ports:
      - "3001:5173"
    depends_on:
      - backend
    networks:
      - app-network

  # React frontend #2 (device management)
  webapp2:
    build:
      context: .
      dockerfile: infra/docker/react-admin.Dockerfile
    restart: always
    volumes:
      - ./apps/webapp2_med_devices:/app
      - webapp2_node_modules:/app/node_modules
    ports:
      - "3002:5174"
    depends_on:
      - backend
    networks:
      - app-network

  # Zookeeper & Kafka
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka:latest
    environment:
      KAFKA_OPTS: "-Djava.net.preferIPv4Stack=true"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CREATE_TOPICS: "medical-device-data:1:1"
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - app-network

  # InfluxDB & Telegraf
  influxdb:
    image: influxdb:2.7
    ports:
      - "8086:8086"
    volumes:
      - influxdb-data:/var/lib/influxdb2
      - influxdb-config:/etc/influxdb2
    networks:
      - app-network

  telegraf:
    image: telegraf:1.28
    restart: always
    env_file:
      - ./config/database/influxdb.env
    volumes:
      - ./config/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    depends_on:
      - influxdb
      - kafka
    networks:
      - app-network

volumes:
  webapp1_node_modules:
  webapp2_node_modules:
  influxdb-data:
  influxdb-config:

networks:
  app-network:
    driver: bridge
